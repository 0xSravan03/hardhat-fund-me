{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./PriceConverter.sol\"; // Library\n\n// custom errors\nerror NotOwner();\nerror NotEnoughMoneySent();\nerror TransferFailed();\n\ncontract FundMe {\n    using PriceConverter for uint256; // using library.\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address payable public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = payable(msg.sender); // setting owner of the contract.\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    address[] public funders; // holds address of account who calls fund function.\n\n    mapping(address => uint256) public addressToAmount;\n\n    function fund() public payable {\n        //require(msg.value.getConversionRate() >= MINIMUM_USD, \"not enough money\");\n        if (msg.value.getConversionRate(priceFeed) < MINIMUM_USD) {\n            revert NotEnoughMoneySent();\n        }\n\n        funders.push(msg.sender);\n        addressToAmount[msg.sender] += msg.value; // mapping address to amount sent.\n    }\n\n    function withdraw() public onlyOwner {\n        // resetting map\n        for (uint256 i = 0; i < funders.length; i++) {\n            addressToAmount[funders[i]] = 0;\n        }\n\n        // resetting array\n        funders = new address[](0);\n\n        // withdraw fund\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n        //require(callSuccess, \"Failed\");\n        if (!callSuccess) {\n            revert TransferFailed();\n        }\n    }\n\n    // only owner modifier\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, \"Not Owner\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    // these functions catch the eth which is sent not using fund function and redirect to fund function\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    // get price of ETH in terms of USD\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // Current ETH price in USD\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        return ((ethAmount * getPrice(priceFeed)) / 1e18); // return ethAmount in usd\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}